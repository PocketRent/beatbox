#!/usr/bin/env hhvm
<?hh

require __DIR__ . '/../xhp/init.php';
require __DIR__ . '/../php/functions/collections.php';
require __DIR__ . '/../php/functions/invariant.php';

function makeMap() : Map<string, Map<string, string>> {
	$lookIn = __DIR__ . '/../..';

	$map = Map<string, Map<string, string>> {};

	$GLOBALS['base'] = realpath(__DIR__ . '/../..');

	foreach(glob($lookIn, GLOB_ONLYDIR) as $dir) {
		$map = map_merge_recursive($map, handleDir($dir));
	}

	$export_map = var_export($map, true);

	$date = date(DATE_ISO8601);

	$php = <<<PHP
<?hh
// Generated by build/classmap at $date
\$map = $export_map;

PHP;

	$mapPath = __DIR__ . '/../conf/map.php';

	if(!file_put_contents($mapPath, $php)) {
		throw new Exception('Unable to write classmap to ' . $mapPath);
	}

	return $map;
}

function handleDir(string $dir) : Map<string, Map<string, string>> {
	$dir = realpath($dir);
	if(!$dir) return Map<string, Map<string, string>> {};

	$map = Map<string, Map<string, string>> {
		'class' => Map <string, string> {},
		'function' => Map <string, string> {},
		'constant' => Map <string, string> {},
		'type' => Map <string, string> {}
	};

	foreach(glob($dir . '/*') as $file) {
		if($file[0] == '.') continue;
		if(is_dir($file)) {
			$map = map_merge_recursive($map, handleDir($file));
		} else {
			$filename = str_replace($GLOBALS['base'], '', $file);
			$filename = ltrim($filename, '/');

			if (substr($filename, -4) != '.php') continue;

			$contents = file_get_contents($file);

			$visitor = new MapVisitor($map, $filename);
			$modelTxt = \HH\CodeModel\get_code_model_for($contents);
			$model = unserialize($modelTxt);

			if ($model)
				$model->accept($visitor);
		}
	}

	return $map;
}

class MapVisitor {
	private Map<string, Map<string, string>> $map;
	private string $filename;

	private bool $inType = false;

	public function __construct(Map<string, Map<string, string>> $map, string $filename) {
		$this->map = $map;
		$this->filename = $filename;
	}

	public function visitTypeStatement($node) {
		$this->map['class'][strtolower($node->getName())] = $this->filename;

		$this->inType = true;
		$this->visitNode($node);
		$this->inType = false;
	}

	public function visitFunctionStatement($node) {
		if (!$this->inType) {
			if ($node->getName())
				$this->map['function'][strtolower($node->getName())] = $this->filename;
		}

		$this->visitNode($node);
	}

	public function visitNode($node) {
		foreach ($node->getChildren() as $child)
			if (is_object($child) && method_exists($child, 'accept'))
				$child->accept($this);
	}
}

if (isset($argc)) {
	makeMap();
}
